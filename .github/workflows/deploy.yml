name: CI/CD Pipeline

on:
  push:
    branches:
      - master  # 只在 main 分支觸發

jobs:
  build-test:
    runs-on: ubuntu-latest
    steps:
      - name: 取得程式碼
        uses: actions/checkout@v3

      # 設置 Python 環境（測試 Flask）
      - name: 設定 Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: 安裝 Flask 依賴
        run: |
          cd backend
          pip install -r requirements.txt

      - name: 執行後端測試（pytest）
        run: |
          cd backend
          pytest tests/

      # 設置 Node.js 環境（測試 React）
      - name: 設定 Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: 安裝 React 依賴
        run: |
          cd frontend
          npm install

      - name: 執行前端測試（Jest）
        run: |
          cd frontend
          npm test -- --watchAll=false

  deploy:
    needs: build-test
    runs-on: ubuntu-latest
    steps:
      - name: 取得程式碼
        uses: actions/checkout@v3

      # 登入 Docker Hub（請先在 GitHub Secrets 設置 DOCKER_USERNAME & DOCKER_PASSWORD）
      - name: 登入 Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      # 建立後端 & 前端 Docker 映像
      - name: 建立並推送 Docker 映像
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/my-backend:latest ./backend
          docker build -t ${{ secrets.DOCKER_USERNAME }}/my-frontend:latest ./frontend
          docker push ${{ secrets.DOCKER_USERNAME }}/my-backend:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/my-frontend:latest

      # SSH 到 AWS EC2，拉取最新的 Docker 映像並重啟服務
      - name: 部署到 AWS EC2
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.AWS_HOST }}
          username: ubuntu
          key: ${{ secrets.AWS_PRIVATE_KEY }}
          script: |
            docker pull ${{ secrets.DOCKER_USERNAME }}/my-backend:latest
            docker pull ${{ secrets.DOCKER_USERNAME }}/my-frontend:latest
            docker stop backend frontend || true
            docker rm backend frontend || true
            docker run -d --name backend -p 5000:5000 --env-file /home/ubuntu/.env ${{ secrets.DOCKER_USERNAME }}/my-backend:latest
            docker run -d --name frontend -p 80:80 ${{ secrets.DOCKER_USERNAME }}/my-frontend:latest
